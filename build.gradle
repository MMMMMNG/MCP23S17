plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.hidetake.ssh' version '2.11.2'
    id 'java'
}

group 'com.rrr'
version '1.3.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenLocal {
        content {
            includeGroup("com.pi4j")
        }
    }

    mavenCentral()
}

sourceSets {
    examples {
        java
    }
}

remotes {
    rasPi {
        host = project.findProperty("RasPiHost")
        user = project.findProperty("RasPiUser")
        if (project.hasProperty("RasPiKey")) {
            identity = file(project.findProperty("RasPiKey"))
        } else {
            password = project.findProperty("RasPiPassword")
        }
        fileTransfer = "scp"
        jschLog = true
        logging = 'slf4j'
    }
}

tasks.register('uberExamplesJar', Jar) {
    archiveClassifier = 'uberExamples'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    def exeClass = project.findProperty("example")
    manifest {
        attributes 'Main-Class': "com.github.mng.mcp23s17.examples.$exeClass"
    }
    from sourceSets.examples.output
    dependsOn configurations.examplesRuntimeClasspath
    from {
        configurations.examplesRuntimeClasspath.findAll({ it.name.endsWith("jar") }).collect { zipTree(it) }
    }
}

def remoteBuildDir = project.findProperty("RasPiRemoteBuildDir")
tasks.register("runExample") {
    def jarName  = 'MCP23S17-' + project.getVersion() + '-uberExamples.jar'
    doLast {
        ssh.run {
            session(remotes.rasPi) {
                execute "mkdir -p $remoteBuildDir"
                put from: "./build/libs/$jarName", into: remoteBuildDir
                executeSudo "java -jar $remoteBuildDir/$jarName 1>&2" //re-route stdout to stderr so the user sees all the log output

            }
        }
    }
}

shadowJar {
    // Merge the services files from the dependencies
    // That is necessary for Pi4j.newAutoContext() to work
    // see https://pi4j.com/documentation/building/fat-jar/#loading-of-the-pi4j-modules
    mergeServiceFiles()
}

compileExamplesJava.dependsOn shadowJar
runExample.dependsOn uberExamplesJar


dependencies {
    testImplementation(platform 'org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    testImplementation 'org.mockito:mockito-core:3.+'
    testImplementation 'com.pi4j:pi4j-plugin-mock:2.3.0-SNAPSHOT'

    testRuntimeOnly 'org.slf4j:slf4j-simple:2.0.9'
    implementation 'com.pi4j:pi4j-core:2.3.0'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'com.pi4j:pi4j-plugin-raspberrypi:2.3.0'
    implementation 'com.pi4j:pi4j-plugin-pigpio:2.3.0'

    examplesImplementation files('./build/libs/MCP23S17-1.3.0-all.jar')
    examplesImplementation 'org.slf4j:slf4j-simple:2.0.9'
    examplesCompileOnly 'org.slf4j:slf4j-api:2.0.9'
    examplesCompileOnly 'com.pi4j:pi4j-core:2.3.0'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

javadoc {
    configure(options) {
        tags(
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:'
        )
    }
}
